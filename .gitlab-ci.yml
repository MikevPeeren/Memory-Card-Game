
# Reference: https://www.exclamationlabs.com/blog/continuous-deployment-to-npm-using-gitlab-ci/

# GitLab uses docker in the background, so we need to specify the
# image versions. This is useful because we're freely to use
# multiple node versions to work with it. They come from the docker
# repo.
#
# Uses the latest NodeJS
image: node:latest

# You specify the stages. Those are the steps that GitLab will go through. Order matters!!!
stages:
  - build
  - test

# Specify what needs to be Cached so future pipelines go quicker.
cache: &global_cache
  paths:
    - node_modules/
    - public/
  policy: pull-push

# We tell GitLab to install all the packages
# before running anything.
# Docker images come with yarn preinstalled
before_script:
  - apt-get update -qq && apt-get install

# We define the diffferent Steps here by name, by defining the Stage we can see those steps in the pipline by that name.
# A Runner can be specified for example like:
# tags:
#   - node
# Runners run the code. They are isolated (virtual) machines that pick up jobs through the coordinator API of GitLab CI.
Build:
  stage: build
  cache:
    # inherit all global cache settings
    <<: *global_cache
  before_script:
    - yarn config set cache-folder .yarn
  script:
    - yarn install
  artifacts:
    paths:
      - node_modules/

Code Coverage:
  stage: test
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull
  script:
    - yarn lint
    - echo 👨🏻‍💻The linter has succesfully passed 👨🏻‍💻

Jest:
  stage: test
  cache:
    # inherit all global cache settings
    <<: *global_cache
    # override the policy
    policy: pull
  script:
    - yarn test
    - echo 🧪 All of the Jest Tests have passed. 🧪