{"version":3,"sources":["components/FlippableSquare/index.tsx","pages/IndexPage/index.tsx","components/Game/index.tsx","pages/GamePage/index.tsx","App.tsx","index.tsx"],"names":["FlippableSquare","state","id","isFlipped","handleClick","props","hasBeenMatched","shouldBeFlippable","setState","prevState","DOMElement","document","getElementById","String","classList","contains","remove","add","renderblock","this","isGameCard","cardIcon","className","classnames","icon","backText","classes","frontClassName","frontText","onClick","cardClassName","Component","defaultProps","undefined","checkFlippedCards","IndexPage","key","href","Game","flippableSquares","flippedSquares","progressBarValue","flippableSquare","find","flipCard","push","setTimeout","handleFlippedCards","length","checkFlippableSquares","firstFlippedCard","secondFlippedCard","forEach","element","flippableSquareFound","flippableSquaresJSON","setInterval","updateProgressBar","map","Alert","variant","Heading","ProgressBar","now","NewGamePage","library","faCoffee","faAirFreshener","faBaby","faAmbulance","faCoins","faCarrot","faCreditCard","faCookie","App","exact","path","component","React","ReactDOM","render"],"mappings":"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","file":"static/js/main.2d558310.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\n// eslint-disable-next-line no-unused-vars\nimport { IconName } from '@fortawesome/fontawesome-svg-core';\n\nimport classnames from 'classnames';\n\ninterface FlippableSquareState {\n\tid: number | null;\n\tisFlipped: boolean;\n}\ninterface FlippableSquareProps {\n\tid: number | null;\n\tcardClassName: string | null;\n\tfrontText: string | null;\n\tbackText: string | {} | null;\n\tshouldBeFlippable: boolean;\n\tfrontClassName: string | null;\n\tisGameCard: boolean;\n\tcardIcon: IconName | undefined;\n\tcheckFlippedCards: Function | undefined;\n\thandleClick: Function | undefined;\n\tisFlipped: boolean;\n\thasBeenMatched: boolean;\n}\n\nclass FlippableSquare extends Component<FlippableSquareProps, FlippableSquareState> {\n\tstate: FlippableSquareState = {\n\t\tid: null,\n\t\tisFlipped: false,\n\t};\n\n\tstatic defaultProps: FlippableSquareProps = {\n\t\tid: null,\n\t\tcardClassName: null,\n\t\tfrontText: null,\n\t\tbackText: null,\n\t\tshouldBeFlippable: true,\n\t\tfrontClassName: null,\n\t\tisGameCard: false,\n\t\tcardIcon: undefined,\n\t\tcheckFlippedCards: undefined,\n\t\thandleClick: undefined,\n\t\tisFlipped: false,\n\t\thasBeenMatched: false,\n\t};\n\n\thandleClick = () => {\n\t\tif (this.props.hasBeenMatched) return;\n\n\t\tif (this.props.handleClick) {\n\t\t\tthis.props.handleClick(this.props.id, this.props.shouldBeFlippable);\n\t\t} else {\n\t\t\t// Kinda want to do this another way but could not figure out how in an elegant way :(\n\t\t\tif (!this.props.shouldBeFlippable) return;\n\n\t\t\t// Set the flipped state.\n\t\t\tthis.setState((prevState: FlippableSquareState) => {\n\t\t\t\tprevState.isFlipped = !prevState.isFlipped;\n\t\t\t\treturn {\n\t\t\t\t\t...prevState,\n\t\t\t\t};\n\t\t\t});\n\n\t\t\tconst DOMElement = document.getElementById(String(this.props.id));\n\n\t\t\tif (DOMElement) {\n\t\t\t\tif (DOMElement.classList.contains('flipped')) {\n\t\t\t\t\tDOMElement.classList.remove('flipped');\n\t\t\t\t} else {\n\t\t\t\t\tDOMElement.classList.add('flipped');\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t};\n\n\trender(): JSX.Element {\n\t\tlet renderblock;\n\t\tif (!this.props.isGameCard) {\n\t\t\tif (this.state.isFlipped) {\n\t\t\t\trenderblock = <div className=\"card-text back card-active\">{this.props.backText}</div>;\n\t\t\t} else {\n\t\t\t\tconst classes = classnames('card-text front', this.props.frontClassName);\n\t\t\t\trenderblock = <div className={classes}>{this.props.frontText}</div>;\n\t\t\t}\n\t\t} else {\n\t\t\tif (this.props.isFlipped) {\n\t\t\t\tif (this.props.cardIcon) {\n\t\t\t\t\trenderblock = (\n\t\t\t\t\t\t<div className=\"card-div\">\n\t\t\t\t\t\t\t<FontAwesomeIcon className={classnames('card-icon')} icon={this.props.cardIcon} />\n\t\t\t\t\t\t</div>\n\t\t\t\t\t);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\n\t\treturn (\n\t\t\t<div id={String(this.props.id)} onClick={this.handleClick} className={classnames(this.props.cardClassName)}>\n\t\t\t\t{renderblock}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default FlippableSquare;\n","import React from 'react';\nimport '../../styles/index.css';\nimport FlippableSquare from '../../components/FlippableSquare';\n\nconst IndexPage = (): JSX.Element => {\n\treturn (\n\t\t<div className=\"card-container\">\n\t\t\t<p className=\"info\">Click the P to get started!</p>\n\t\t\t<FlippableSquare\n\t\t\t\tkey={1}\n\t\t\t\tid={1}\n\t\t\t\tcardClassName=\"card left\"\n\t\t\t\tshouldBeFlippable\n\t\t\t\tisFlipped={false}\n\t\t\t\tfrontText=\"F\"\n\t\t\t\tbackText=\"A Memory Card Game\"\n\t\t\t/>\n\t\t\t<FlippableSquare\n\t\t\t\tkey={2}\n\t\t\t\tid={2}\n\t\t\t\tcardClassName=\"card left\"\n\t\t\t\tfrontClassName=\"card-active\"\n\t\t\t\tshouldBeFlippable={false}\n\t\t\t\tisFlipped={false}\n\t\t\t\tfrontText=\"L\"\n\t\t\t\tbackText=\"This is a Memory Card Game\"\n\t\t\t/>\n\t\t\t<FlippableSquare\n\t\t\t\tkey={3}\n\t\t\t\tid={3}\n\t\t\t\tcardClassName=\"card\"\n\t\t\t\tshouldBeFlippable\n\t\t\t\tisFlipped={false}\n\t\t\t\tfrontText=\"I\"\n\t\t\t\tbackText={\n\t\t\t\t\t<div className=\"instructions\">\n\t\t\t\t\t\t<h2>Instructions</h2>\n\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\tThis is a timed card memory game. Click the green cards to see what symbol they uncover and\n\t\t\t\t\t\t\ttry to find the matching symbol underneath the other cards.\n\t\t\t\t\t\t</p>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t/>\n\t\t\t<FlippableSquare\n\t\t\t\tkey={4}\n\t\t\t\tid={4}\n\t\t\t\tcardClassName=\"card\"\n\t\t\t\tshouldBeFlippable\n\t\t\t\tisFlipped={false}\n\t\t\t\tfrontText=\"P\"\n\t\t\t\tbackText={\n\t\t\t\t\t<div className=\"playgame\">\n\t\t\t\t\t\t<a href=\"/new-game\" className=\"play\">\n\t\t\t\t\t\t\tPlay\n\t\t\t\t\t\t</a>\n\t\t\t\t\t</div>\n\t\t\t\t}\n\t\t\t/>\n\t\t</div>\n\t);\n};\n\nexport default IndexPage;\n","import React, { Component } from 'react';\nimport ProgressBar from 'react-bootstrap/ProgressBar';\nimport Alert from 'react-bootstrap/Alert';\n\nimport { IconName } from '@fortawesome/free-solid-svg-icons';\n\nimport FlippableSquare from '../FlippableSquare';\n\nimport flippableSquaresJSON from '../../assets/easy-game.json';\n\ninterface GameState {\n\tflippableSquares: FlippableSquare[];\n\tflippedSquares: FlippableSquare[];\n\tprogressBarValue: number;\n}\n\nclass Game extends Component<{}, GameState> {\n\tstate: GameState = {\n\t\tflippableSquares: [],\n\t\tflippedSquares: [],\n\t\tprogressBarValue: 0,\n\t};\n\n\tconstructor(props: {}) {\n\t\tsuper(props);\n\t\tthis.state = {\n\t\t\t//@ts-ignore\n\t\t\tflippableSquares: flippableSquaresJSON,\n\t\t\tflippedSquares: [],\n\t\t\tprogressBarValue: 0,\n\t\t};\n\t}\n\n\t// If the component is mounted update the progressbart\n\tcomponentDidMount() {\n\t\tsetInterval(() => this.updateProgressBar(), 1000);\n\t}\n\n\thandleClick = (id: number, shouldBeFlippable: boolean) => {\n\t\t// If it shouldn't be able to be flipped return.\n\t\tif (!shouldBeFlippable) return;\n\n\t\tthis.setState((prevState: GameState) => {\n\t\t\tconst { flippableSquares, flippedSquares } = prevState;\n\n\t\t\t// Find the specific card that matches the ID provided\n\t\t\tconst flippableSquare: any = flippableSquares.find((flippableSquare: any) => flippableSquare.id === id);\n\t\t\tif (!flippableSquare) return;\n\n\t\t\t// Set the flipped property opposite as it is now.\n\t\t\tflippableSquare.isFlipped = !flippableSquare.isFlipped;\n\t\t\tthis.flipCard(flippableSquare.id, flippableSquare);\n\t\t\t// If it is flipped push it to the flipped squares array.\n\t\t\tif (flippableSquare.isFlipped) {\n\t\t\t\tflippedSquares.push(flippableSquare.id);\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\tflippableSquares,\n\t\t\t\tflippedSquares,\n\t\t\t};\n\t\t});\n\n\t\t// Call the handleFlippedCards method in order to check if cards are matched.\n\t\t// In a timeout because the checks are happening too fast.\n\t\tsetTimeout(() => {\n\t\t\tthis.handleFlippedCards();\n\t\t}, 1337);\n\t};\n\n\thandleFlippedCards = () => {\n\t\tthis.setState((prevState: GameState) => {\n\t\t\tconst { flippableSquares, flippedSquares } = prevState;\n\n\t\t\t// If the flippedsquares length is bigger than 2, reset all squares.\n\t\t\tif (flippedSquares.length > 2) {\n\t\t\t\tthis.checkFlippableSquares(prevState);\n\t\t\t} else {\n\t\t\t\t// Find the two elements in the FlippedSquares array.\n\t\t\t\tconst firstFlippedCard: any = flippableSquares.find(\n\t\t\t\t\t(flippableSquare: any) => flippableSquare.id === flippedSquares[0],\n\t\t\t\t);\n\t\t\t\tconst secondFlippedCard: any = flippableSquares.find(\n\t\t\t\t\t(flippableSquare: any) => flippableSquare.id === flippedSquares[1],\n\t\t\t\t);\n\n\t\t\t\t// If there is no first or second flipped card return.\n\t\t\t\tif (!firstFlippedCard || !secondFlippedCard) return;\n\t\t\t\tif (firstFlippedCard.cardIcon === secondFlippedCard.cardIcon) {\n\t\t\t\t\tfirstFlippedCard.hasBeenMatched = true;\n\t\t\t\t\tsecondFlippedCard.hasBeenMatched = true;\n\t\t\t\t} else {\n\t\t\t\t\tthis.checkFlippableSquares(prevState);\n\t\t\t\t}\n\t\t\t}\n\t\t\t// Resetting the FlippedSquare array in order to not get any conflicts.\n\t\t\tflippedSquares.length = 0;\n\n\t\t\treturn {\n\t\t\t\t...prevState,\n\t\t\t\tflippableSquares,\n\t\t\t\tflippedSquares,\n\t\t\t};\n\t\t});\n\t};\n\n\t// Function to check the flippable squares and to flip them\n\tcheckFlippableSquares = (prevState: GameState) => {\n\t\tconst { flippableSquares, flippedSquares } = prevState;\n\t\tflippedSquares.forEach((element: any) => {\n\t\t\tconst flippableSquareFound: any = flippableSquares.find(\n\t\t\t\t(flippableSquare: any) => flippableSquare.id === element,\n\t\t\t);\n\n\t\t\tflippableSquareFound.isFlipped = !flippableSquareFound.isFlipped;\n\t\t\tthis.flipCard(flippableSquareFound.id, flippableSquareFound);\n\t\t});\n\t};\n\n\t// The flipping of the card happens here by manipulating the specific Dom Element.\n\tflipCard = (id: number, flippableSquare: any) => {\n\t\t// If the card somehow has been matched do nothing.\n\t\tif (flippableSquare.hasBeenMatched) return;\n\n\t\tconst DOMElement = document.getElementById(String(id));\n\n\t\tif (DOMElement) {\n\t\t\tif (DOMElement.classList.contains('flipped')) {\n\t\t\t\tDOMElement.classList.remove('flipped');\n\t\t\t} else {\n\t\t\t\tDOMElement.classList.add('flipped');\n\t\t\t}\n\t\t}\n\t};\n\n\t// Updating the progressbar with 5% each time.\n\tupdateProgressBar() {\n\t\tthis.setState((prevState: GameState) => {\n\t\t\tlet { progressBarValue } = prevState;\n\n\t\t\tif (progressBarValue >= 100) {\n\t\t\t\tconst DOMElement = document.getElementById('game-over');\n\t\t\t\tif (DOMElement) {\n\t\t\t\t\tDOMElement.classList.remove('game-over-display');\n\t\t\t\t}\n\t\t\t\tprevState.flippableSquares = [];\n\t\t\t} else {\n\t\t\t\tprogressBarValue = prevState.progressBarValue + 5;\n\t\t\t}\n\n\t\t\treturn {\n\t\t\t\tprogressBarValue,\n\t\t\t};\n\t\t});\n\t}\n\n\trender() {\n\t\tif (!this.state.flippableSquares) {\n\t\t\treturn;\n\t\t}\n\n\t\t// Foreach json object map it to a FlippableSquare and put it into the state.\n\t\tconst flippableSquares = this.state.flippableSquares.map((flippableSquare: any) => (\n\t\t\t<FlippableSquare\n\t\t\t\tkey={flippableSquare.id}\n\t\t\t\tid={flippableSquare.id}\n\t\t\t\tcardClassName=\"card-new-game\"\n\t\t\t\tcardIcon={flippableSquare.cardIcon as IconName}\n\t\t\t\tshouldBeFlippable\n\t\t\t\tisGameCard\n\t\t\t\tisFlipped={flippableSquare.isFlipped}\n\t\t\t\thandleClick={this.handleClick}\n\t\t\t\thasBeenMatched={flippableSquare.hasBeenMatched}\n\t\t\t/>\n\t\t));\n\n\t\treturn (\n\t\t\t<div className=\"card-container-new-game\">\n\t\t\t\t<Alert id=\"game-over\" className=\"game-over game-over-display\" variant=\"danger\">\n\t\t\t\t\t<Alert.Heading>Game Over</Alert.Heading>\n\t\t\t\t\t<p className=\"mb-0\">\n\t\t\t\t\t\t<br />\n\t\t\t\t\t\tYou did not complete the game within the given time period. Please try again, by refreshing. :)\n\t\t\t\t\t</p>\n\t\t\t\t</Alert>\n\t\t\t\t<ProgressBar className=\"progressbar\" variant=\"warning\" now={this.state.progressBarValue} />\n\t\t\t\t{flippableSquares}\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default Game;\n","import React from 'react';\nimport '../../styles/newgame.css';\nimport Game from '../../components/Game';\n\nconst NewGamePage = (): JSX.Element => {\n\treturn <Game />;\n};\n\nexport default NewGamePage;\n","import React from 'react';\nimport { Switch, BrowserRouter, Route } from 'react-router-dom';\nimport IndexPage from './pages/IndexPage';\nimport NewGamePage from './pages/GamePage';\nimport { library } from '@fortawesome/fontawesome-svg-core';\nimport {\n\tfaCoffee,\n\tfaAirFreshener,\n\tfaBaby,\n\tfaAmbulance,\n\tfaCoins,\n\tfaCarrot,\n\tfaCreditCard,\n\tfaCookie,\n} from '@fortawesome/free-solid-svg-icons';\n\nlibrary.add(faCoffee);\nlibrary.add(faAirFreshener);\nlibrary.add(faBaby);\nlibrary.add(faAmbulance);\nlibrary.add(faCoins);\nlibrary.add(faCarrot);\nlibrary.add(faCreditCard);\nlibrary.add(faCookie);\n\nclass App extends React.Component {\n\trender() {\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t<BrowserRouter>\n\t\t\t\t\t<Switch>\n\t\t\t\t\t\t<Route exact={true} path=\"/\" component={IndexPage} />\n\t\t\t\t\t\t<Route exact={true} path=\"/new-game\" component={NewGamePage} />\n\t\t\t\t\t</Switch>\n\t\t\t\t</BrowserRouter>\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}